{
  parserClass="org.intellij.batch.parser.BatchParser"

  // extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Batch"
  psiImplClassSuffix="Impl"
  psiPackage="org.intellij.batch.psi"
  psiImplPackage="org.intellij.batch.psi.impl"

  elementTypeHolderClass="org.intellij.batch.psi.BatchTypes"
  elementTypeClass="org.intellij.batch.psi.BatchElementType"
  tokenTypeClass="org.intellij.batch.psi.BatchTokenType"

  // psiImplUtilClass="org.intellij.batch.psi.impl.BatchPsiImplUtil"
}

batchFile ::= command*

command ::= joinedCommand
          | disjointCommand
          | conjointCommand
          | pipedCommand
          | parenthesisedCommand
          | atomicCommand

private atomicCommand ::= simpleCommand | ifCommand

joinedCommand ::= command COMMAND_JOIN_OPERATOR command { extends = command }
disjointCommand ::= command COMMAND_DISJUNCTION_OPERATOR command { extends = command }
conjointCommand ::= command COMMAND_CONJUNCTION_OPERATOR command { extends = command }
pipedCommand ::= command PIPE_OPERATOR command { extends = command }

parenthesisedCommand ::= redirection* LEFT_PARENTHESES command+ RIGHT_PARENTHESES redirection* { extends = command }

simpleCommand ::= redirection* COMMAND_NAME (CHAR_SEQUENCE | redirection)* { extends = command }
redirection ::= REDIRECT_TO_HANDLE_OPERATOR | (REDIRECT_TO_FILE_OPERATOR CHAR_SEQUENCE)

ifCommand ::= IF_KEYWORD ifCondition command [ELSE_KEYWORD command] { extends = command }
ifCondition ::= existCondition | equalityCondition
existCondition ::= EXIST_KEYWORD CHAR_SEQUENCE
equalityCondition ::= CHAR_SEQUENCE EQUALITY_OPERATOR CHAR_SEQUENCE

tokens ::=
EOL_OPERATOR // possibly there is no need in this token
LABEL_DEFINITION_OPERATOR
LABEL_NAME
COMMENT_CONTENT
